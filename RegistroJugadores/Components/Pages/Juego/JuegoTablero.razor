@page "/Juego/Tablero/{PartidaId:int}"
@inject PartidasService partidasService
@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<div class="container mx-auto max-w-lg p-6 bg-white rounded-lg shadow-xl text-center">

    @if (partida == null || jugadorX == null)
    {
        <p>Cargando partida...</p>
    }
    else
    {
        <div class="game-container">
            <div class="game-screen">
                @if (partida.Jugador2Id == null)
                {
                    <h2 class="game-status">Turno de: @jugadorX.Nombres</h2>
                    <p>Elige el Jugador 2</p>

                    <InputSelect @bind-Value="partida.Jugador2Id" @onchange="Jugador2Elegido">
                        <option value="">Selecciona un jugador</option>
                        @foreach (var jugador in jugadoresDisponibles.Where(jugador => jugador.JugadorId != jugadorX.JugadorId))
                        {
                            <option value="@jugador.JugadorId">@jugador.Nombres</option>
                        }
                    </InputSelect>
                }
                else
                {
                    <h2 class="game-status">@GameStatus</h2>
                }

                <div class="game-board">
                    @for (var i = 0; i < 9; i++)
                    {
                        var cellIndex = i;
                        <button class="cell @GetPlayerClass(board[cellIndex])"
                                @onclick="() => HandleCellClick(cellIndex)"
                                disabled="@(board[cellIndex] != null || partida.EstadoPartida != "En curso")">
                            @board[cellIndex]?.ToString()
                        </button>
                    }
                </div>

                <button class="btn btn-secondary mt-4" @onclick="RestartGame">
                    Reiniciar Juego
                </button>
            </div>
        </div>
    }
</div>
@code {
    [Parameter]
    public int PartidaId { get; set; }

    private Partidas partida;
    private Jugadores jugadorX;
    private Jugadores jugadorO;
    private List<Jugadores> jugadoresDisponibles;
    private enum PlayerType { X, O }

    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType _currentPlayerType;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
        await CargarEstadoJuego();
    }

    private async Task CargarDatosIniciales()
    {
        partida = await partidasService.Buscar(PartidaId);

        if (partida == null)
        {
            navigationManager.NavigateTo("/Partidas");
            return;
        }

        jugadorX = await jugadoresService.Buscar(partida.Jugador1Id);
        jugadorO = partida.Jugador2Id.HasValue
            ? await jugadoresService.Buscar(partida.Jugador2Id.Value)
            : null;
        partida.Ganador = partida.GanadorId.HasValue
            ? await jugadoresService.Buscar(partida.GanadorId.Value)
            : null;

        jugadoresDisponibles = await jugadoresService.Listar(p => true);
    }

    private async Task Jugador2Elegido()
    {
        if (partida.Jugador2Id.HasValue)
        {
            jugadorO = await jugadoresService.Buscar(partida.Jugador2Id.Value);

            if (jugadorO != null)
            {
                partida.TurnoJugadorId = jugadorX.JugadorId;
                partida.EstadoPartida = "En curso";
                await partidasService.Guardar(partida);
                await CargarEstadoJuego();
                StateHasChanged();
            }
        }
    }

    private async Task CargarEstadoJuego()
    {
        if (partida == null)
            return;

        if (!string.IsNullOrEmpty(partida.EstadoTablero))
        {
            var estadoTablero = partida.EstadoTablero;
            for (int i = 0; i < 9; i++)
            {
                board[i] = estadoTablero[i] switch
                {
                    'X' => PlayerType.X,
                    'O' => PlayerType.O,
                    _ => null
                };
            }
        }
        else
        {
            board = new PlayerType?[9];
        }

        if (partida.Jugador2Id.HasValue)
        {
            _currentPlayerType = partida.TurnoJugadorId == jugadorX?.JugadorId ? PlayerType.X : PlayerType.O;
        }
        else
        {
            _currentPlayerType = PlayerType.X;
        }
    }

    private string GameStatus
    {
        get
        {
            if (partida == null)
                return "";

            if (partida.EstadoPartida == "En curso")
            {
                var jugadorActual = partida.TurnoJugadorId == jugadorX?.JugadorId ? jugadorX?.Nombres : jugadorO?.Nombres ?? "Jugador 2";
                return $"Turno de: {jugadorActual}";
            }
            if (partida.EstadoPartida == "Terminada")
            {
                return $"🏆 ¡Ganador: {(partida.Ganador?.Nombres ?? "Desconocido")}!";
            }
            if (partida.EstadoPartida == "Empate")
            {
                return "🤝 ¡Es un empate!";
            }
            return "";
        }
    }

    private async Task HandleCellClick(int index)
    {
        if (partida == null || board[index] != null || partida.EstadoPartida != "En curso")
        {
            return;
        }

        board[index] = _currentPlayerType;

        if (!partida.Jugador2Id.HasValue)
        {
            partida.EstadoTablero = string.Join("", board.Select(p => p?.ToString() ?? " "));
            await partidasService.Guardar(partida);
            StateHasChanged();
            return;
        }

        var winner = CheckForWinner();
        bool esEmpate = board.All(cell => cell != null) && winner == null;

        if (winner != null)
        {
            partida.EstadoPartida = "Terminada";
            partida.GanadorId = winner == PlayerType.X ? jugadorX?.JugadorId ?? 0 : jugadorO?.JugadorId ?? 0;
            partida.FechaFin = DateTime.Now;

            await jugadoresService.Guardar(jugadorX);
            await jugadoresService.Guardar(jugadorO);
            await partidasService.Guardar(partida);

            await CargarDatosIniciales();
            await CargarEstadoJuego();
            StateHasChanged();
        }
        else if (esEmpate)
        {
            partida.EstadoPartida = "Empate";
            partida.FechaFin = DateTime.Now;

            if (jugadorX != null) jugadorX.Empates++;
            if (jugadorO != null) jugadorO.Empates++;
            await jugadoresService.Guardar(jugadorX);
            await jugadoresService.Guardar(jugadorO);
            await partidasService.Guardar(partida);
        }
        else
        {
            _currentPlayerType = (_currentPlayerType == PlayerType.X) ? PlayerType.O : PlayerType.X;
            partida.TurnoJugadorId = (_currentPlayerType == PlayerType.X) ? jugadorX?.JugadorId ?? 0 : jugadorO?.JugadorId ?? 0;
        }
        partida.EstadoTablero = string.Join("", board.Select(p => p?.ToString() ?? " "));
        await partidasService.Guardar(partida);

        StateHasChanged();
    }

    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
             new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},
             new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},
             new[] {0, 4, 8}, new[] {2, 4, 6}
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
            {
                return board[a];
            }
        }

        return null;
    }

    private async Task RestartGame()
    {
        if (partida == null)
            return;

        partida.EstadoPartida = "En curso";
        partida.EstadoTablero = string.Empty;
        partida.TurnoJugadorId = jugadorX?.JugadorId ?? 0;
        partida.GanadorId = null;
        partida.FechaFin = null;

        await partidasService.Guardar(partida);
        await CargarDatosIniciales();
        await CargarEstadoJuego();
        StateHasChanged();
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }
}
